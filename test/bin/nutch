#!/bin/bash
#
#
# The Nutch command script for testing purpose. This script does not execute Nutch processes.
# It's primary purpose is to Mock nutch processes, so that the tests could be performed without actually executing them.
#
# Environment Variables
#
#   NUTCH_JAVA_HOME The java implementation to use.  Overrides JAVA_HOME.
#
#   NUTCH_HEAPSIZE  The maximum amount of heap to use, in MB. 
#                   Default is 1000.
#
#   NUTCH_OPTS      Extra Java runtime options.
#
cygwin=false
case "`uname`" in
CYGWIN*) cygwin=true;;
esac

# resolve links - $0 may be a softlink
THIS="$0"
while [ -h "$THIS" ]; do
  ls=`ls -ld "$THIS"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '.*/.*' > /dev/null; then
    THIS="$link"
  else
    THIS=`dirname "$THIS"`/"$link"
  fi
done

# if no args specified, show usage
if [ $# = 0 ]; then
  echo "Usage: nutch COMMAND"
  echo "where COMMAND is one of:"
# echo " crawl one-step crawler for intranets"
  echo " inject		inject new urls into the database"
  echo " hostinject     creates or updates an existing host table from a text file"
  echo " generate 	generate new batches to fetch from crawl db"
  echo " fetch 		fetch URLs marked during generate"
  echo " parse 		parse URLs marked during fetch"
  echo " updatedb 	update web table after parsing"
  echo " updatehostdb   update host table after parsing"
  echo " readdb 	read/dump records from page database"
  echo " readhostdb     display entries from the hostDB"
  echo " elasticindex   run the elasticsearch indexer"
  echo " solrindex 	run the solr indexer on parsed batches"
  echo " solrdedup 	remove duplicates from solr"
  echo " parsechecker   check the parser for a given url"
  echo " indexchecker   check the indexing filters for a given url"
  echo " plugin 	load a plugin and run one of its classes main()"
  echo " nutchserver    run a (local) Nutch server on a user defined port"
  echo " junit         	runs the given JUnit test"
  echo " or"
  echo " CLASSNAME 	run the class named CLASSNAME"
  echo "Most commands print help when invoked w/o parameters."
  exit 1
fi

# get arguments
COMMAND=$1
shift
# some directories
THIS_DIR=`dirname "$THIS"`
NUTCH_HOME=`cd "$THIS_DIR/.." ; pwd`
  
# NUTCH_JOB 
if [ -f ${NUTCH_HOME}/*nutch*.job ]; then
    local=false
  for f in $NUTCH_HOME/*nutch*.job; do
    NUTCH_JOB=$f;
  done
else
  local=true
fi

# cygwin path translation
if $cygwin; then
  NUTCH_JOB=`cygpath -p -w "$NUTCH_JOB"`
fi

NUTCH_OPTS="$NUTCH_OPTS"

# figure out which class to run
if [ "$COMMAND" = "crawl" ] ; then
  exit 0;
elif [ "$COMMAND" = "inject" ] ; then
    CRAWLID=$3
    if [ "$CRAWLID" = "injector.success" ] ; then
      exit 0;
    else 
      exit 1;
    fi
elif [ "$COMMAND" = "hostinject" ] ; then
exit 0;
elif [ "$COMMAND" = "generate" ] ; then
    CRAWLID=${18}
    if [ "$CRAWLID" = "generator.success" ] ; then
      exit 0;
    else 
      exit 1;
    fi
elif [ "$COMMAND" = "fetch" ] ; then
    CRAWLID=${15}
    if [ "$CRAWLID" = "fetcher.success" ] ; then
      exit 0;
    else 
      exit 1;
    fi
elif [ "$COMMAND" = "parse" ] ; then
    CRAWLID=${17}
    if [ "$CRAWLID" = "parser.success" ] ; then
      exit 0;
    else 
      exit 1;
    fi
elif [ "$COMMAND" = "updatedb" ] ; then
    CRAWLID=${12}
    if [ "$CRAWLID" = "updatedb.success" ] ; then
      exit 0;
    else 
      exit 1;
    fi
elif [ "$COMMAND" = "updatehostdb" ] ; then
exit 0;
elif [ "$COMMAND" = "readdb" ] ; then
exit 0;
elif [ "$COMMAND" = "readhostdb" ] ; then
exit 0;
elif [ "$COMMAND" = "elasticindex" ] ; then
exit 0;
elif [ "$COMMAND" = "solrindex" ] ; then
    CRAWLID=${14}
    if [ "$CRAWLID" = "solrindex.success" ] ; then
      exit 0;
    else 
      exit 1;
    fi
elif [ "$COMMAND" = "solrdedup" ] ; then
    exit 0;
elif [ "$COMMAND" = "parsechecker" ] ; then
  exit 0;
elif [ "$COMMAND" = "indexchecker" ] ; then
exit 0;
elif [ "$COMMAND" = "plugin" ] ; then
exit 0;
elif [ "$COMMAND" = "nutchserver" ] ; then
exit 0;
else
  echo "NOTHING MATCHES"
  exit 0;
fi
